{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "factoryName": {
      "type": "string",
      "metadata": "Data Factory name",
      "defaultValue": "AZ-WEUR-DEV-RNA-ADF01"
    },
    "RNAHANA_LKSVC01_connectionString": {
      "type": "secureString",
      "metadata": "Secure string for 'connectionString' of 'RNAHANA_LKSVC01'",
      "defaultValue": "SERVERNODE=de-iph-x50.knauf.loc;UID=SERVICEUSERDATACLOUDHANA"
    },
    "SYNWS01_SYNDP01_LKSVC01_connectionString": {
      "type": "secureString",
      "metadata": "Secure string for 'connectionString' of 'SYNWS01_SYNDP01_LKSVC01'",
      "defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=az-weur-dev-rna-synws01.sql.azuresynapse.net;Initial Catalog=SYNDP01"
    },
    "AZ_WEUR_XXX_RNA_KV01_properties_typeProperties_baseUrl": {
      "type": "string",
      "defaultValue": "https://AZ-WEUR-DEV-RNA-KV01.vault.azure.net/"
    },
    "COMEXSTORAGE01_LKSVC01_properties_typeProperties_url": {
      "type": "string",
      "defaultValue": "https://azweurprodcomexstorage01.dfs.core.windows.net/"
    },
    "RNAHANA_LKSVC01_properties_typeProperties_password": {
      "type": "object",
      "defaultValue": {
        "type": "AzureKeyVaultSecret",
        "store": {
          "referenceName": "AZ_WEUR_XXX_RNA_KV01",
          "type": "LinkedServiceReference"
        },
        "secretName": "RNA-HANA-DB-SERVICEUSERDATACLOUDHANA-PASSWORD"
      }
    },
    "RNAHANA_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "SHIR01-RUN01"
    },
    "RNAHANA_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "RNASA01_BRONZE_LKSVC01_properties_typeProperties_url": {
      "type": "string",
      "defaultValue": "https://azweurdevrnasa01.dfs.core.windows.net/"
    },
    "RNASA01_BRONZE_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "RNASA01_BRONZE_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "RNASA01_LKSVC01_properties_typeProperties_url": {
      "type": "string",
      "defaultValue": "https://azweurdevrnasa01.dfs.core.windows.net/"
    },
    "RNASA01_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "RNASA01_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "RNASA01_SILVER_LKSVC01_properties_typeProperties_url": {
      "type": "string",
      "defaultValue": "https://azweurdevrnasa01.dfs.core.windows.net/"
    },
    "RNASA01_SILVER_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "RNASA01_SILVER_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "SF_LKSVC01_properties_typeProperties_environmentUrl": {
      "type": "string",
      "defaultValue": "https://knauf--uat.sandbox.my.salesforce.com"
    },
    "SF_LKSVC01_properties_typeProperties_username": {
      "type": "string",
      "defaultValue": "css-onecrm-integ@knauf.com.uat"
    },
    "SF_LKSVC01_properties_typeProperties_password": {
      "type": "object",
      "defaultValue": {
        "type": "AzureKeyVaultSecret",
        "store": {
          "referenceName": "AZ_WEUR_XXX_RNA_KV01",
          "type": "LinkedServiceReference"
        },
        "secretName": "SF-LKSVC01-PASSWORD"
      }
    },
    "SF_LKSVC01_properties_typeProperties_securityToken": {
      "type": "object",
      "defaultValue": {
        "type": "AzureKeyVaultSecret",
        "store": {
          "referenceName": "AZ_WEUR_XXX_RNA_KV01",
          "type": "LinkedServiceReference"
        },
        "secretName": "SF-LKSVC01-TOKEN"
      }
    },
    "SF_LKSVC01_properties_typeProperties_apiVersion": {
      "type": "string",
      "defaultValue": "51.0"
    },
    "SF_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "SF_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_endpoint": {
      "type": "string",
      "defaultValue": "https://az-weur-dev-rna-synws01.dev.azuresynapse.net"
    },
    "SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_authentication": {
      "type": "string",
      "defaultValue": "MSI"
    },
    "SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_workspaceResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourceGroups/AZ-WEUR-DEV-RNA-RG01/providers/Microsoft.Synapse/workspaces/az-weur-dev-rna-synws01"
    },
    "SYNWS01_ARTIFACTS_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "SYNWS01_ARTIFACTS_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "SYNWS01_SYNDP01_LKSVC01_properties_connectVia_referenceName": {
      "type": "string",
      "defaultValue": "StandardIntegrationRuntime"
    },
    "SYNWS01_SYNDP01_LKSVC01_properties_connectVia_type": {
      "type": "string",
      "defaultValue": "IntegrationRuntimeReference"
    },
    "AZ-WEUR-PROD-COMEX-STORAGE01-DFS-MPE01_properties_privateLinkResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourceGroups/AZ-WEUR-PROD-COMEX-RG01/providers/Microsoft.Storage/storageAccounts/azweurprodcomexstorage01"
    },
    "AZ-WEUR-PROD-COMEX-STORAGE01-DFS-MPE01_properties_groupId": {
      "type": "string",
      "defaultValue": "dfs"
    },
    "AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_privateLinkResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourceGroups/AZ-WEUR-DEV-RNA-RG01/providers/Microsoft.Storage/storageAccounts/azweurdevrnasa01"
    },
    "AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_groupId": {
      "type": "string",
      "defaultValue": "dfs"
    },
    "AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_fqdns": {
      "type": "array",
      "defaultValue": [
        "azweurdevrnasa01.dfs.core.windows.net"
      ]
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_privateLinkResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourceGroups/AZ-WEUR-DEV-RNA-RG01/providers/Microsoft.Synapse/workspaces/az-weur-dev-rna-synws01"
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_groupId": {
      "type": "string",
      "defaultValue": "dev"
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_fqdns": {
      "type": "array",
      "defaultValue": [
        "az-weur-dev-rna-synws01.dev.azuresynapse.net"
      ]
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_privateLinkResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourceGroups/AZ-WEUR-DEV-RNA-RG01/providers/Microsoft.Synapse/workspaces/az-weur-dev-rna-synws01"
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_groupId": {
      "type": "string",
      "defaultValue": "sql"
    },
    "AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_fqdns": {
      "type": "array",
      "defaultValue": [
        "az-weur-dev-rna-synws01.sql.azuresynapse.net"
      ]
    }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
    {
      "name": "[concat(parameters('factoryName'), '/CSSCreateFullObjects-PIPE01')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "CopyEachObjectToBronze",
            "description": "",
            "type": "ForEach",
            "dependsOn": [],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@pipeline().parameters.ObjectNameArray",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "CopyToBronze",
                  "type": "Copy",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "SalesforceSource",
                      "readBehavior": "query"
                    },
                    "sink": {
                      "type": "ParquetSink",
                      "storeSettings": {
                        "type": "AzureBlobFSWriteSettings"
                      },
                      "formatSettings": {
                        "type": "ParquetWriteSettings"
                      }
                    },
                    "enableStaging": false,
                    "translator": {
                      "type": "TabularTranslator",
                      "typeConversion": true,
                      "typeConversionSettings": {
                        "allowDataTruncation": true,
                        "treatBooleanAsNumber": false
                      }
                    }
                  },
                  "inputs": [
                    {
                      "referenceName": "SalesforceSource",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": {
                          "value": "@item()",
                          "type": "Expression"
                        }
                      }
                    }
                  ],
                  "outputs": [
                    {
                      "referenceName": "SalesforceBronzeFull",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": {
                          "value": "@item()",
                          "type": "Expression"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          },
          {
            "name": "CSSCreateFullObjects",
            "type": "SynapseNotebook",
            "dependsOn": [
              {
                "activity": "CopyEachObjectToBronze",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "notebook": {
                "referenceName": {
                  "value": "CSSCreateFullObjects",
                  "type": "Expression"
                },
                "type": "NotebookReference"
              },
              "parameters": {
                "TableNameArray": {
                  "value": {
                    "value": "@string(pipeline().parameters.ObjectNameArray)",
                    "type": "Expression"
                  },
                  "type": "string"
                }
              },
              "snapshot": true,
              "sparkPool": {
                "referenceName": {
                  "value": "SYNSP01",
                  "type": "Expression"
                },
                "type": "BigDataPoolReference"
              },
              "executorSize": "Small",
              "conf": {
                "spark.dynamicAllocation.enabled": true,
                "spark.dynamicAllocation.minExecutors": 1,
                "spark.dynamicAllocation.maxExecutors": 11
              },
              "driverSize": "Small",
              "numExecutors": 1
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_ARTIFACTS_LKSVC01",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CreateEachExternalTable",
            "description": "",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "CSSCreateFullObjects",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@pipeline().parameters.ObjectNameArray",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "CreateExternalTable",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[universal].[CreateExternalTable]",
                    "storedProcedureParameters": {
                      "SchemaName": {
                        "value": "css_silver",
                        "type": "String"
                      },
                      "ObjectName": {
                        "value": {
                          "value": "@item()",
                          "type": "Expression"
                        },
                        "type": "String"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SYNWS01_SYNDP01_LKSVC01",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "ObjectNameArray": {
            "type": "array"
          }
        },
        "folder": {
          "name": "CommercialSteeringSystem"
        },
        "annotations": [],
        "lastPublishTime": "2023-10-04T16:25:10Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_ARTIFACTS_LKSVC01')]",
        "[concat(variables('factoryId'), '/datasets/SalesforceSource')]",
        "[concat(variables('factoryId'), '/datasets/SalesforceBronzeFull')]",
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_SYNDP01_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/CSSCreateSnapshotObjects-PIPE01')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "CSSCreateSnapshotObjects",
            "type": "SynapseNotebook",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "notebook": {
                "referenceName": {
                  "value": "CSSCreateSnapshotObjects",
                  "type": "Expression"
                },
                "type": "NotebookReference"
              },
              "parameters": {
                "TableNameArray": {
                  "value": {
                    "value": "@string(pipeline().parameters.ObjectNameArray)",
                    "type": "Expression"
                  },
                  "type": "string"
                }
              },
              "snapshot": true,
              "sparkPool": {
                "referenceName": {
                  "value": "SYNSP01",
                  "type": "Expression"
                },
                "type": "BigDataPoolReference"
              },
              "executorSize": "Small",
              "conf": {
                "spark.dynamicAllocation.enabled": true,
                "spark.dynamicAllocation.minExecutors": 1,
                "spark.dynamicAllocation.maxExecutors": 11
              },
              "driverSize": "Small",
              "numExecutors": 1
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_ARTIFACTS_LKSVC01",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CreateEachExternalTable",
            "description": "",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "CSSCreateSnapshotObjects",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@pipeline().parameters.ObjectNameArray",
                "type": "Expression"
              },
              "activities": [
                {
                  "name": "CreateExternalSnapshotTable",
                  "type": "SqlServerStoredProcedure",
                  "dependsOn": [],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "storedProcedureName": "[[universal].[CreateExternalTable]",
                    "storedProcedureParameters": {
                      "SchemaName": {
                        "value": "css_silver",
                        "type": "String"
                      },
                      "ObjectName": {
                        "value": {
                          "value": "@concat(item(),'_Snapshot')",
                          "type": "Expression"
                        },
                        "type": "String"
                      }
                    }
                  },
                  "linkedServiceName": {
                    "referenceName": "SYNWS01_SYNDP01_LKSVC01",
                    "type": "LinkedServiceReference"
                  }
                }
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "ObjectNameArray": {
            "type": "array"
          }
        },
        "folder": {
          "name": "CommercialSteeringSystem"
        },
        "annotations": [],
        "lastPublishTime": "2023-10-04T16:25:10Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_ARTIFACTS_LKSVC01')]",
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_SYNDP01_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ComExMigration')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "activities": [
          {
            "name": "Copy ComEx Archive to Data Cloud",
            "type": "Copy",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "BinarySource",
                "storeSettings": {
                  "type": "AzureBlobFSReadSettings",
                  "recursive": true,
                  "modifiedDatetimeStart": {
                    "value": "@adddays(utcnow(), mul(pipeline().parameters.PastDays,-1))",
                    "type": "Expression"
                  },
                  "deleteFilesAfterCompletion": false
                },
                "formatSettings": {
                  "type": "BinaryReadSettings"
                }
              },
              "sink": {
                "type": "BinarySink",
                "storeSettings": {
                  "type": "AzureBlobFSWriteSettings"
                }
              },
              "enableStaging": false,
              "skipErrorFile": {
                "fileMissing": false,
                "dataInconsistency": false
              },
              "validateDataConsistency": true
            },
            "inputs": [
              {
                "referenceName": "ComExMigrationSource",
                "type": "DatasetReference",
                "parameters": {}
              }
            ],
            "outputs": [
              {
                "referenceName": "ComExMigrationSink",
                "type": "DatasetReference",
                "parameters": {}
              }
            ]
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "parameters": {
          "PastDays": {
            "type": "int",
            "defaultValue": 1
          }
        },
        "folder": {
          "name": "ComExMigration"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/ComExMigrationSource')]",
        "[concat(variables('factoryId'), '/datasets/ComExMigrationSink')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SalesforceIncrementalEvent')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Pipeline for incremental loads tests",
        "activities": [
          {
            "name": "LookupLatestTimestampSalesforce",
            "description": "Get all SysModStamps which are not yet in Bronze layer",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "source": {
                "type": "SalesforceSource",
                "query": {
                  "value": "@concat('SELECT max(SystemModstamp) as SystemModStamp from Event')",
                  "type": "Expression"
                },
                "readBehavior": "query"
              },
              "dataset": {
                "referenceName": "SalesforceSource",
                "type": "DatasetReference",
                "parameters": {
                  "ObjectName": "Event"
                }
              },
              "firstRowOnly": true
            }
          },
          {
            "name": "ForEachSysModStamp",
            "description": "Copy data from Salesforce for each SysModStamp which is not yet in Bronze layer.",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "CreateArray",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@variables('varIntervals')",
                "type": "Expression"
              },
              "isSequential": true,
              "activities": [
                {
                  "name": "Salesforce SysModStamp load",
                  "description": "Load from Salesforce based on SystemModStamp",
                  "type": "Copy",
                  "dependsOn": [
                    {
                      "activity": "v_from",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "v_to",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "SalesforceSource",
                      "query": {
                        "value": "@concat(\n    'SELECT Id,WhoId,WhatId,WhoCount,WhatCount,Location,IsAllDayEvent,ActivityDateTime,ActivityDate,DurationInMinutes,StartDateTime,EndDateTime,EndDate,AccountId,OwnerId,IsPrivate,ShowAs,IsDeleted,IsChild,IsGroupEvent,GroupEventType,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,IsArchived,RecurrenceActivityId,IsRecurrence,RecurrenceStartDateTime,RecurrenceEndDateOnly,RecurrenceTimeZoneSidKey,RecurrenceType,RecurrenceInterval,RecurrenceDayOfWeekMask,RecurrenceDayOfMonth,RecurrenceInstance,RecurrenceMonthOfYear,ReminderDateTime,IsReminderSet,EventSubtype,IsRecurrence2Exclusion,Recurrence2PatternText,Recurrence2PatternVersion,IsRecurrence2,IsRecurrence2Exception,Recurrence2PatternStartDate,Recurrence2PatternTimeZone,OC_DynamicSessionLink__c,OC_InternalComments__c,OC_Reason__c,OC_Status__c,OC_Type__c,OC_Account__c,OC_EntityOfTheAssignedTo__c, OC_LocationType__c,OC_RelatedTo__c,OC_TypeOfTask__c,OC_IsMyEntityActivity__c,OC_Account_City__c,OC_Account_Type__c,OC_Contact__c,OC_DateOfEvent__c,OC_IsCreatedBeforeEventDate__c,OC_SetToDoneOnEventDate__c,OC_TaskDescription__c\n    from Event where \n        SystemModstamp > ', formatDateTime(string(variables('v_from')), 'yyyy-MM-ddTHH:mm:ssZ') , ' and ',\n        'SystemModstamp <= ', formatDateTime(string(variables('v_to')), 'yyyy-MM-ddTHH:mm:ssZ'))",
                        "type": "Expression"
                      },
                      "readBehavior": "query"
                    },
                    "sink": {
                      "type": "ParquetSink",
                      "storeSettings": {
                        "type": "AzureBlobFSWriteSettings"
                      },
                      "formatSettings": {
                        "type": "ParquetWriteSettings"
                      }
                    },
                    "enableStaging": false,
                    "translator": {
                      "type": "TabularTranslator",
                      "typeConversion": true,
                      "typeConversionSettings": {
                        "allowDataTruncation": true,
                        "treatBooleanAsNumber": false
                      }
                    }
                  },
                  "inputs": [
                    {
                      "referenceName": "SalesforceSource",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": "Event"
                      }
                    }
                  ],
                  "outputs": [
                    {
                      "referenceName": "SalesforceBronzeIncremental",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": "Event",
                        "FileName": {
                          "value": "@concat('Event-', formatDateTime(variables('v_to'), 'yyyyMMddHHmmss'), '.parquet')",
                          "type": "Expression"
                        }
                      }
                    }
                  ]
                },
                {
                  "name": "v_from",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "v_from",
                    "value": {
                      "value": "@split(item(), '/')[0]",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "v_to",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "v_to",
                    "value": {
                      "value": "@split(item(), '/')[1]",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "GetLatestTimestampBronze",
            "description": "Get the latest timestamp from the bronze layer file names",
            "type": "SynapseNotebook",
            "dependsOn": [],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "notebook": {
                "referenceName": {
                  "value": "GetLatestTimeStamp",
                  "type": "Expression"
                },
                "type": "NotebookReference"
              },
              "snapshot": true,
              "sparkPool": {
                "referenceName": {
                  "value": "SYNSP01",
                  "type": "Expression"
                },
                "type": "BigDataPoolReference"
              },
              "executorSize": "Small",
              "conf": {
                "spark.dynamicAllocation.enabled": false,
                "spark.dynamicAllocation.minExecutors": 1,
                "spark.dynamicAllocation.maxExecutors": 1
              },
              "driverSize": "Small",
              "numExecutors": 1
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_ARTIFACTS_LKSVC01",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "GetTimeIntervals",
            "description": "Create string with time intervals defining FROM-TO ranges for load from salesforce",
            "type": "SynapseNotebook",
            "dependsOn": [
              {
                "activity": "GetLatestTimestampBronze",
                "dependencyConditions": [
                  "Succeeded"
                ]
              },
              {
                "activity": "LookupLatestTimestampSalesforce",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "notebook": {
                "referenceName": {
                  "value": "PrepareTimeIntervals",
                  "type": "Expression"
                },
                "type": "NotebookReference"
              },
              "parameters": {
                "p_Bronze": {
                  "value": {
                    "value": "@activity('GetLatestTimestampBronze').output.status.output.result.exitValue",
                    "type": "Expression"
                  },
                  "type": "string"
                },
                "p_Salesforce": {
                  "value": {
                    "value": "@activity('LookupLatestTimestampSalesforce').output.firstRow.SystemModStamp",
                    "type": "Expression"
                  },
                  "type": "string"
                }
              },
              "snapshot": true,
              "sparkPool": {
                "referenceName": {
                  "value": "SYNSP01",
                  "type": "Expression"
                },
                "type": "BigDataPoolReference"
              },
              "executorSize": "Small",
              "conf": {
                "spark.dynamicAllocation.enabled": false,
                "spark.dynamicAllocation.minExecutors": 1,
                "spark.dynamicAllocation.maxExecutors": 1
              },
              "driverSize": "Small",
              "numExecutors": 1
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_ARTIFACTS_LKSVC01",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CreateArray",
            "description": "Create array out of intervals string passed from GetTimeIntervals notebook. Array to be used in foreach loop",
            "type": "SetVariable",
            "dependsOn": [
              {
                "activity": "GetTimeIntervals",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "variableName": "varIntervals",
              "value": {
                "value": "@split(activity('GetTimeIntervals').output.status.output.result.exitValue, ',')",
                "type": "Expression"
              }
            }
          },
          {
            "name": "EventHistorySilver",
            "description": "Get delta files from bronze layer, create calculated columns and save in silver",
            "type": "SynapseNotebook",
            "dependsOn": [
              {
                "activity": "ForEachSysModStamp",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "notebook": {
                "referenceName": {
                  "value": "EventHistorySilver",
                  "type": "Expression"
                },
                "type": "NotebookReference"
              },
              "snapshot": true,
              "sparkPool": {
                "referenceName": {
                  "value": "SYNSP01",
                  "type": "Expression"
                },
                "type": "BigDataPoolReference"
              },
              "executorSize": "Small",
              "conf": {
                "spark.dynamicAllocation.enabled": false,
                "spark.dynamicAllocation.minExecutors": 1,
                "spark.dynamicAllocation.maxExecutors": 1
              },
              "driverSize": "Small",
              "numExecutors": 1
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_ARTIFACTS_LKSVC01",
              "type": "LinkedServiceReference"
            }
          },
          {
            "name": "CreateExternalTable",
            "description": "Create external table in synapse for Event_History",
            "type": "SqlServerStoredProcedure",
            "dependsOn": [
              {
                "activity": "EventHistorySilver",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "policy": {
              "timeout": "0.12:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "storedProcedureName": "[[universal].[CreateExternalTable]",
              "storedProcedureParameters": {
                "ObjectName": {
                  "value": "Event_History",
                  "type": "String"
                },
                "SchemaName": {
                  "value": "css_silver",
                  "type": "String"
                }
              }
            },
            "linkedServiceName": {
              "referenceName": "SYNWS01_SYNDP01_LKSVC01",
              "type": "LinkedServiceReference"
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "variables": {
          "sysmaxdate": {
            "type": "String"
          },
          "varIntervals": {
            "type": "Array"
          },
          "v_from": {
            "type": "String"
          },
          "v_to": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Salesforce"
        },
        "annotations": [],
        "lastPublishTime": "2023-10-04T16:25:10Z"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/SalesforceSource')]",
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_ARTIFACTS_LKSVC01')]",
        "[concat(variables('factoryId'), '/linkedServices/SYNWS01_SYNDP01_LKSVC01')]",
        "[concat(variables('factoryId'), '/datasets/SalesforceBronzeIncremental')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SalesforceIncrementalEvent_Emergency')]",
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Pipeline for incremental loads tests",
        "activities": [
          {
            "name": "ForEachSysModStamp",
            "description": "Copy data from Salesforce for each SysModStamp which is not yet in Bronze layer.",
            "type": "ForEach",
            "dependsOn": [
              {
                "activity": "CreateArray",
                "dependencyConditions": [
                  "Succeeded"
                ]
              }
            ],
            "userProperties": [],
            "typeProperties": {
              "items": {
                "value": "@variables('varIntervals')",
                "type": "Expression"
              },
              "isSequential": true,
              "activities": [
                {
                  "name": "Salesforce SysModStamp load",
                  "description": "Load from Salesforce based on SystemModStamp",
                  "type": "Copy",
                  "dependsOn": [
                    {
                      "activity": "v_from",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    },
                    {
                      "activity": "v_to",
                      "dependencyConditions": [
                        "Succeeded"
                      ]
                    }
                  ],
                  "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "source": {
                      "type": "SalesforceSource",
                      "query": {
                        "value": "@concat(\n    'SELECT Id,WhoId,WhatId,WhoCount,WhatCount,Location,IsAllDayEvent,ActivityDateTime,ActivityDate,DurationInMinutes,StartDateTime,EndDateTime,EndDate,AccountId,OwnerId,IsPrivate,ShowAs,IsDeleted,IsChild,IsGroupEvent,GroupEventType,CreatedDate,CreatedById,LastModifiedDate,LastModifiedById,SystemModstamp,IsArchived,RecurrenceActivityId,IsRecurrence,RecurrenceStartDateTime,RecurrenceEndDateOnly,RecurrenceTimeZoneSidKey,RecurrenceType,RecurrenceInterval,RecurrenceDayOfWeekMask,RecurrenceDayOfMonth,RecurrenceInstance,RecurrenceMonthOfYear,ReminderDateTime,IsReminderSet,EventSubtype,IsRecurrence2Exclusion,Recurrence2PatternText,Recurrence2PatternVersion,IsRecurrence2,IsRecurrence2Exception,Recurrence2PatternStartDate,Recurrence2PatternTimeZone,OC_DynamicSessionLink__c,OC_InternalComments__c,OC_Reason__c,OC_Status__c,OC_Type__c,OC_Account__c,OC_EntityOfTheAssignedTo__c, OC_LocationType__c,OC_RelatedTo__c,OC_TypeOfTask__c,OC_IsMyEntityActivity__c,OC_Account_City__c,OC_Account_Type__c,OC_Contact__c,OC_DateOfEvent__c,OC_IsCreatedBeforeEventDate__c,OC_SetToDoneOnEventDate__c,OC_TaskDescription__c,AcceptedEventInviteeIds,DeclinedEventInviteeIds\n    from Event where \n        SystemModstamp > ', formatDateTime(string(variables('v_from')), 'yyyy-MM-ddTHH:mm:ssZ') , ' and ',\n        'SystemModstamp <= ', formatDateTime(string(variables('v_to')), 'yyyy-MM-ddTHH:mm:ssZ'))",
                        "type": "Expression"
                      },
                      "readBehavior": "query"
                    },
                    "sink": {
                      "type": "ParquetSink",
                      "storeSettings": {
                        "type": "AzureBlobFSWriteSettings"
                      },
                      "formatSettings": {
                        "type": "ParquetWriteSettings"
                      }
                    },
                    "enableStaging": false,
                    "translator": {
                      "type": "TabularTranslator",
                      "typeConversion": true,
                      "typeConversionSettings": {
                        "allowDataTruncation": true,
                        "treatBooleanAsNumber": false
                      }
                    }
                  },
                  "inputs": [
                    {
                      "referenceName": "SalesforceSource",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": "Event"
                      }
                    }
                  ],
                  "outputs": [
                    {
                      "referenceName": "SalesforceBronzeIncremental",
                      "type": "DatasetReference",
                      "parameters": {
                        "ObjectName": "Event",
                        "FileName": {
                          "value": "@concat('Event-MAY2023-TEST', formatDateTime(variables('v_to'), 'yyyyMMddHHmmss'), '.parquet')",
                          "type": "Expression"
                        }
                      }
                    }
                  ]
                },
                {
                  "name": "v_from",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "v_from",
                    "value": {
                      "value": "@split(item(), '/')[0]",
                      "type": "Expression"
                    }
                  }
                },
                {
                  "name": "v_to",
                  "type": "SetVariable",
                  "dependsOn": [],
                  "policy": {
                    "secureOutput": false,
                    "secureInput": false
                  },
                  "userProperties": [],
                  "typeProperties": {
                    "variableName": "v_to",
                    "value": {
                      "value": "@split(item(), '/')[1]",
                      "type": "Expression"
                    }
                  }
                }
              ]
            }
          },
          {
            "name": "CreateArray",
            "description": "Create array out of intervals string passed from GetTimeIntervals notebook. Array to be used in foreach loop",
            "type": "SetVariable",
            "dependsOn": [],
            "policy": {
              "secureOutput": false,
              "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
              "variableName": "varIntervals",
              "value": [
                "2023-04-30T23:59:59Z/2023-05-07T23:59:59Z",
                "2023-05-07T23:59:59Z/2023-05-14T23:59:59Z",
                "2023-05-14T23:59:59Z/2023-05-21T23:59:59Z",
                "2023-05-21T23:59:59Z/2023-05-31T23:59:59Z"
              ]
            }
          }
        ],
        "policy": {
          "elapsedTimeMetric": {}
        },
        "variables": {
          "sysmaxdate": {
            "type": "String"
          },
          "varIntervals": {
            "type": "Array"
          },
          "v_from": {
            "type": "String"
          },
          "v_to": {
            "type": "String"
          }
        },
        "folder": {
          "name": "Salesforce"
        },
        "annotations": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/datasets/SalesforceSource')]",
        "[concat(variables('factoryId'), '/datasets/SalesforceBronzeIncremental')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ComExMigrationSink')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "RNASA01_LKSVC01",
          "type": "LinkedServiceReference"
        },
        "folder": {
          "name": "ComExMigration"
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "folderPath": "Salesforce/ComExMigration",
            "fileSystem": "bronze"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/RNASA01_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/ComExMigrationSource')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "COMEXSTORAGE01_LKSVC01",
          "type": "LinkedServiceReference"
        },
        "folder": {
          "name": "ComExMigration"
        },
        "annotations": [],
        "type": "Binary",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "folderPath": "Salesforce_Archive",
            "fileSystem": "comex"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/COMEXSTORAGE01_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SalesforceBronzeFull')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "RNASA01_BRONZE_LKSVC01",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "ObjectName": {
            "type": "string"
          }
        },
        "folder": {
          "name": "Salesforce"
        },
        "annotations": [],
        "type": "Parquet",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@concat(\n    dataset().ObjectName,\n    '/',\n    dataset().ObjectName,\n    '-',\n    utcNow('yyyyMMddHHmmss'),\n    '.parquet')",
              "type": "Expression"
            },
            "folderPath": "Salesforce/Full",
            "fileSystem": "bronze"
          },
          "compressionCodec": "snappy"
        },
        "schema": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/RNASA01_BRONZE_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SalesforceBronzeIncremental')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "RNASA01_BRONZE_LKSVC01",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "ObjectName": {
            "type": "string"
          },
          "FileName": {
            "type": "string"
          }
        },
        "folder": {
          "name": "Salesforce"
        },
        "annotations": [],
        "type": "Parquet",
        "typeProperties": {
          "location": {
            "type": "AzureBlobFSLocation",
            "fileName": {
              "value": "@dataset().FileName",
              "type": "Expression"
            },
            "folderPath": {
              "value": "@concat('Salesforce/Incremental/', dataset().ObjectName)",
              "type": "Expression"
            },
            "fileSystem": "bronze"
          },
          "compressionCodec": "snappy"
        },
        "schema": []
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/RNASA01_BRONZE_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SalesforceSource')]",
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "properties": {
        "linkedServiceName": {
          "referenceName": "SF_LKSVC01",
          "type": "LinkedServiceReference"
        },
        "parameters": {
          "ObjectName": {
            "type": "string"
          }
        },
        "folder": {
          "name": "Salesforce"
        },
        "annotations": [],
        "type": "SalesforceObject",
        "schema": [],
        "typeProperties": {
          "objectApiName": {
            "value": "@dataset().ObjectName",
            "type": "Expression"
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/linkedServices/SF_LKSVC01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/AZ_WEUR_XXX_RNA_KV01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureKeyVault",
        "typeProperties": {
          "baseUrl": "[parameters('AZ_WEUR_XXX_RNA_KV01_properties_typeProperties_baseUrl')]"
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/COMEXSTORAGE01_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobFS",
        "typeProperties": {
          "url": "[parameters('COMEXSTORAGE01_LKSVC01_properties_typeProperties_url')]"
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/RNAHANA_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "SapHana",
        "typeProperties": {
          "connectionString": "[parameters('RNAHANA_LKSVC01_connectionString')]",
          "password": "[parameters('RNAHANA_LKSVC01_properties_typeProperties_password')]"
        },
        "connectVia": {
          "referenceName": "[parameters('RNAHANA_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('RNAHANA_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('RNAHANA_LKSVC01_properties_connectVia_referenceName'))]",
        "[concat(variables('factoryId'), '/linkedServices/AZ_WEUR_XXX_RNA_KV01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RNASA01_BRONZE_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Bronze layer on RNA storage account",
        "annotations": [],
        "type": "AzureBlobFS",
        "typeProperties": {
          "url": "[parameters('RNASA01_BRONZE_LKSVC01_properties_typeProperties_url')]"
        },
        "connectVia": {
          "referenceName": "[parameters('RNASA01_BRONZE_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('RNASA01_BRONZE_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('RNASA01_BRONZE_LKSVC01_properties_connectVia_referenceName'))]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RNASA01_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureBlobFS",
        "typeProperties": {
          "url": "[parameters('RNASA01_LKSVC01_properties_typeProperties_url')]"
        },
        "connectVia": {
          "referenceName": "[parameters('RNASA01_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('RNASA01_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('RNASA01_LKSVC01_properties_connectVia_referenceName'))]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/RNASA01_SILVER_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "description": "Silver layer on RNA storage account",
        "annotations": [],
        "type": "AzureBlobFS",
        "typeProperties": {
          "url": "[parameters('RNASA01_SILVER_LKSVC01_properties_typeProperties_url')]"
        },
        "connectVia": {
          "referenceName": "[parameters('RNASA01_SILVER_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('RNASA01_SILVER_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('RNASA01_SILVER_LKSVC01_properties_connectVia_referenceName'))]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SF_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "Salesforce",
        "typeProperties": {
          "environmentUrl": "[parameters('SF_LKSVC01_properties_typeProperties_environmentUrl')]",
          "username": "[parameters('SF_LKSVC01_properties_typeProperties_username')]",
          "password": "[parameters('SF_LKSVC01_properties_typeProperties_password')]",
          "securityToken": "[parameters('SF_LKSVC01_properties_typeProperties_securityToken')]",
          "apiVersion": "[parameters('SF_LKSVC01_properties_typeProperties_apiVersion')]"
        },
        "connectVia": {
          "referenceName": "[parameters('SF_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('SF_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('SF_LKSVC01_properties_connectVia_referenceName'))]",
        "[concat(variables('factoryId'), '/linkedServices/AZ_WEUR_XXX_RNA_KV01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SYNWS01_ARTIFACTS_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureSynapseArtifacts",
        "typeProperties": {
          "endpoint": "[parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_endpoint')]",
          "authentication": "[parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_authentication')]",
          "workspaceResourceId": "[parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_typeProperties_workspaceResourceId')]"
        },
        "connectVia": {
          "referenceName": "[parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('SYNWS01_ARTIFACTS_LKSVC01_properties_connectVia_referenceName'))]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/SYNWS01_SYNDP01_LKSVC01')]",
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "type": "AzureSqlDW",
        "typeProperties": {
          "connectionString": "[parameters('SYNWS01_SYNDP01_LKSVC01_connectionString')]"
        },
        "connectVia": {
          "referenceName": "[parameters('SYNWS01_SYNDP01_LKSVC01_properties_connectVia_referenceName')]",
          "type": "[parameters('SYNWS01_SYNDP01_LKSVC01_properties_connectVia_type')]"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/integrationRuntimes/', parameters('SYNWS01_SYNDP01_LKSVC01_properties_connectVia_referenceName'))]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0000-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Started",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "CSSCreateFullObjects-PIPE01",
              "type": "PipelineReference"
            },
            "parameters": {
              "ObjectNameArray": [
                "Account",
                "AccountContactRelation",
                "Case",
                "CaseHistory",
                "Contact",
                "CurrencyType",
                "ObjectTerritory2Association",
                "OC_AccountClassification__c",
                "OC_AccountPlan__c",
                "OC_AccountPlanMeasure__c",
                "OC_AccountSalesOrg__c",
                "OC_AccountSalesOrgTeam__c",
                "OC_Case_Product__C",
                "OC_ClassificationPotentialArticleGroup__c",
                "OC_Loyalty_Program__c",
                "OC_MasterSalesOrg__c",
                "OC_PlantWarehouse__C",
                "OC_PotentialArticleGroup__c",
                "OC_PotentialCalculationCompetitor__c",
                "OC_Project__c",
                "OC_ThresholdPotentialArticleGroup__c",
                "Opportunity",
                "OpportunityHistory",
                "OpportunityTeamMember",
                "Product2",
                "Quote",
                "QuoteLineItem",
                "RecordType",
                "Territory2",
                "Territory2Model",
                "Territory2Type",
                "User",
                "UserRole",
                "UserTerritory2Association"
              ]
            }
          },
          {
            "pipelineReference": {
              "referenceName": "SalesforceIncrementalEvent",
              "type": "PipelineReference"
            },
            "parameters": {}
          },
          {
            "pipelineReference": {
              "referenceName": "ComExMigration",
              "type": "PipelineReference"
            },
            "parameters": {
              "PastDays": 3
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:40:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                0
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/CSSCreateFullObjects-PIPE01')]",
        "[concat(variables('factoryId'), '/pipelines/SalesforceIncrementalEvent')]",
        "[concat(variables('factoryId'), '/pipelines/ComExMigration')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0100-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:41:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                1
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0200-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:43:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                2
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0300-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:43:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                3
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0400-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:45:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                4
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0500-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:45:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                5
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0600-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:46:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                6
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0700-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:46:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                7
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0800-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:47:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                8
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt0900-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:47:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                9
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1000-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:48:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                10
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1100-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:49:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                11
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1200-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:49:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                12
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1300-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:50:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                13
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1400-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:50:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                14
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1500-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:51:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                15
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1600-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:51:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                16
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1700-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:51:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                17
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1800-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:52:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                18
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt1900-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:52:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                19
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt2000-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:56:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                20
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt2100-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T17:56:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                21
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt2200-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T18:14:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                22
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/DailyAt2300-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Stopped",
        "pipelines": [],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Day",
            "interval": 1,
            "startTime": "2023-11-04T18:22:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                23
              ]
            }
          }
        }
      },
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/MonthlyOn01At0100-TRIG01')]",
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "properties": {
        "annotations": [],
        "runtimeState": "Started",
        "pipelines": [
          {
            "pipelineReference": {
              "referenceName": "CSSCreateSnapshotObjects-PIPE01",
              "type": "PipelineReference"
            },
            "parameters": {
              "ObjectNameArray": [
                "Account",
                "Case",
                "Contact",
                "ObjectTerritory2Association",
                "OC_AccountClassification__c",
                "OC_AccountPlan__c",
                "OC_AccountPlanMeasure__c",
                "OC_AccountSalesOrg__c",
                "OC_AccountSalesOrgTeam__c",
                "OC_MasterSalesOrg__c",
                "Opportunity",
                "OpportunityTeamMember",
                "Quote",
                "QuoteLineItem",
                "Territory2",
                "User",
                "UserRole",
                "UserTerritory2Association"
              ]
            }
          }
        ],
        "type": "ScheduleTrigger",
        "typeProperties": {
          "recurrence": {
            "frequency": "Month",
            "interval": 1,
            "startTime": "2023-11-04T18:25:00Z",
            "timeZone": "UTC",
            "schedule": {
              "minutes": [
                0
              ],
              "hours": [
                1
              ],
              "monthDays": [
                1
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/CSSCreateSnapshotObjects-PIPE01')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/StandardIntegrationRuntime')]",
      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
      "apiVersion": "2018-06-01",
      "properties": {
        "type": "Managed",
        "description": "Integration runtime for standard RNA use cases",
        "typeProperties": {
          "computeProperties": {
            "location": "West Europe",
            "dataFlowProperties": {
              "computeType": "General",
              "coreCount": 8,
              "timeToLive": 10,
              "cleanup": false,
              "customProperties": []
            },
            "pipelineExternalComputeScaleProperties": {
              "timeToLive": 60
            }
          }
        },
        "managedVirtualNetwork": {
          "type": "ManagedVirtualNetworkReference",
          "referenceName": "default"
        }
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/default')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
      "apiVersion": "2018-06-01",
      "properties": {},
      "dependsOn": []
    },
    {
      "name": "[concat(parameters('factoryName'), '/default/AZ-WEUR-PROD-COMEX-STORAGE01-DFS-MPE01')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
      "apiVersion": "2018-06-01",
      "properties": {
        "privateLinkResourceId": "[parameters('AZ-WEUR-PROD-COMEX-STORAGE01-DFS-MPE01_properties_privateLinkResourceId')]",
        "groupId": "[parameters('AZ-WEUR-PROD-COMEX-STORAGE01-DFS-MPE01_properties_groupId')]"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/default/AZ-WEUR-XXX-RNA-SA01-DFS-MPE01')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
      "apiVersion": "2018-06-01",
      "properties": {
        "privateLinkResourceId": "[parameters('AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_privateLinkResourceId')]",
        "groupId": "[parameters('AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_groupId')]",
        "fqdns": "[parameters('AZ-WEUR-XXX-RNA-SA01-DFS-MPE01_properties_fqdns')]"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/default/AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
      "apiVersion": "2018-06-01",
      "properties": {
        "privateLinkResourceId": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_privateLinkResourceId')]",
        "groupId": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_groupId')]",
        "fqdns": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-DEV-MPE01_properties_fqdns')]"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
      ]
    },
    {
      "name": "[concat(parameters('factoryName'), '/default/AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01')]",
      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
      "apiVersion": "2018-06-01",
      "properties": {
        "privateLinkResourceId": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_privateLinkResourceId')]",
        "groupId": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_groupId')]",
        "fqdns": "[parameters('AZ-WEUR-XXX-RNA-SYNWS01-SQL-MPE01_properties_fqdns')]"
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/managedVirtualNetworks/default')]"
      ]
    },
    {
      "name": "[concat(parameters(factoryName), /SHIR01-RUN01)]",
      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
      "apiVersion": "2018-06-01",
      "properties": {
        "type": "SelfHosted",
        "typeProperties": {
          "linkedInfo": {
            "resourceId": "/subscriptions/1e97185d-6892-4844-9688-e3b26adccca2/resourcegroups/AZ-WEUR-PROD-RNA-RG01/providers/Microsoft.DataFactory/factories/AZ-WEUR-PROD-RNA-ADF01/integrationruntimes/SHIR01-RUN01",
            "authorizationType": "Rbac"
          }
        }
      },
      "dependsOn": []
    }
  ]
}
