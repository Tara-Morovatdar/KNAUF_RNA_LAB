# This is a basic workflow to help you get started with Actions

name: cicd-dev
# Controls when the workflow will run
run-name: Deploy to Dev environment by @${{ github.actor }}
on:
  workflow_dispatch:
#Run only when the pull request is closed and it targets main branch
  push:
    
    branches:
    - main
    paths-ignore:
      - '.github/**'
      - 'build/**'
      - 'README.md'
      - 'CODEOWNERS'

# Modify the default permissions granted to GITHUB_TOKEN.
permissions:
      id-token: write
      contents: write
      packages: write

jobs: 
  Build:
    runs-on: ubuntu-latest
    outputs:
      BUILD_NAME: ${{ steps.buildname.outputs.BUILD_NAME }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.BUILD_PAT }}      

      - name: Generate build name with timestamp
        id: buildname
        run: echo "BUILD_NAME=build-adf-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
 

      # Installs Node and the npm packages saved in your package.json file in the build
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 14.x

      #Caching (to cache the dependencies so the workflow execution time reduces)
      - name: Cache dependencies
        uses: actions/cache@v3
        with: 
          path: ~/.npm
          key: deps-node-modules-$${{ hashFiles('**/package-lock.json')}}  

      - name: Install ADF Utilities package
        run: npm install
        working-directory: ./build  # (1) provide the folder location of the package.json file

      # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
      - name: Validate
      # (2) The validate command needs the root folder location of your repository where all the objects are stored. And the 2nd parameter is the resourceID of the ADF instance 
        run: npm run build validate ${{github.workspace}}/ /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/<resourceGroupName>/providers/Microsoft.DataFactory/factories/<ADFname> 
        working-directory: ${{github.workspace}}/build  

      - name: Validate and Generate ARM template
      # (3) The build command, as validate, needs the root folder location of your repository where all the objects are stored. And the 2nd parameter is the resourceID of the ADF instance. The 3rd parameter is the exported ARM template artifact name 
        run: npm run build export ${{github.workspace}}/ /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/<resourceGroupName>/providers/Microsoft.DataFactory/factories/<ADFname> ${{ steps.buildname.outputs.BUILD_NAME }}  
        working-directory: ${{github.workspace}}/build
  
      # In order to leverage the artifact in another job, we need to upload it with the upload action 
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          # (4) use the same artifact name you used in the previous export step
          name: ${{ steps.buildname.outputs.BUILD_NAME }} 
          path: ${{github.workspace}}/build/${{ steps.buildname.outputs.BUILD_NAME }}
          
      #Commit updated builds (commit changes made in your workflow run directly to the repo)     
      - name: Commit the built artifact
        uses: EndBug/add-and-commit@v9
        with:
          #message: 'Your commit message'
          message: 'commit artifact ${{ steps.buildname.outputs.BUILD_NAME }}'
          
