# This is a basic workflow to help you get started with Actions

name: cicd-uat

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      build_name:
        description: 'Get the right build name from the ./build directory for UAT deployment'    
        required: true
        default: 'build-adf-<timestamp>'


  # Allows you to run this workflow manually from the Actions tab
permissions:
      id-token: write
      contents: write
      packages: write
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo "Env: ${{ github.event.inputs.build_name }}" 
        
    - name: Checkout code
      uses: actions/checkout@v3
# Installs Node and the npm packages saved in your package.json file in the build

    - name: Setup Node.js environment
      uses: actions/setup-node@v3.4.1
      with:
        node-version: 14.x

#Caching (you have to  repeat this step everytime before the install job so it uses the cache)
    - name: cache dependencies
      uses: actions/cache@v3
      with: 
        path: ~/.npm
        key: deps-node-modules-$${{ hashFiles('**/package-lock.json')}}  

    - name: install ADF Utilities package
      run: npm install
      working-directory: ${{github.workspace}}/build  # (1) provide the folder location of the package.json file 
    
    - name: Print build name
      run: echo "The build name is ${{ github.event.inputs.build_name }}"


  DeployToTestEnviornment:
    runs-on: ubuntu-latest
    steps:
    
 # we 1st download the previously uploaded artifact so we can leverage it later in the release job
      # - name: Zip Files
      #   uses: vimtor/action-zip@v1
      #   with:
      #     files: ./build/${{ github.event.inputs.build_name }} 
      #     dest: ${{ github.event.inputs.build_name }}

      # - name: upload artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ${{ github.event.inputs.build_name }} # (4) use the same artifact name you used in the previous export step
      #   #  path: ${{github.workspace}}/build/${{ env.BUILD_NAME }}   
      # - name: Download a Build Artifact
      #   uses: actions/download-artifact@v3.0.2
      #   with:
      #     name: ${{ github.event.inputs.build_name }} # (5) Artifact name 


      - name: Login via Az module
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true 

      - name: data-factory-deploy
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: ADF_LAB_KNAUF # (6) your target ADF resource group name
          dataFactoryName: DatafactoryForKnaufDemo # (7) your target ADF name
          armTemplateFile: build/build-adf-20230815094549/ARMTemplateForFactory.json # (8) ARM template file name ARMTemplateForFactory.json
          armTemplateParametersFile: build/build-adf-20230815094549/ARMTemplateParametersForFactory.json # (9) ARM template parameters file name ARMTemplateParametersForFactory.json
          
          # skipAzModuleInstallation:  # Parameters which skip the Az module installation. Optional, default is false.â€‹    
    
    
